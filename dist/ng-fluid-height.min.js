/*! 
 * ng-fluid-height v1.0.1
 * https://github.com/deopard/ng-fluid-height#readme
 * Copyright (c) 2016 Tom Kim
 * License: MIT
 */
!function(){angular.module("deopard.ngFluidHeight",[])}(),function(){function i(i,t){function n(n,e,u,a){function g(){return{h:c[0].innerHeight,w:c[0].innerHeight}}function d(){var i=t.getFluidHeight(n.fluidHeightFluid);e.css("max-height",i+"px")}var c=angular.element(i);c.bind("resize",function(){n.$apply()}),n.$watch(g,d,!0),n.$on("fluid-height-changed",d),t.registerFluid(n.fluidHeightFluid,n)}var e={restrict:"A",scope:{fluidHeightFluid:"="},link:n};return e}angular.module("deopard.ngFluidHeight").directive("fluidHeightFluid",i),i.$inject=["$window","FluidHeightManager"]}(),function(){function i(i){function t(t,n,e,u){var a=t.fluidHeightStatic,g=t.fluidHeightStaticKey,d=t.fluidHeightStaticHeight;d||(d=n[0].offsetHeight,t.$watch(function(){return n[0].offsetHeight},function(n){i.changed(a,g,t.fluidHeightStaticShown===!1?0:n)})),i.registerStatic(a,g,t.fluidHeightStaticShown===!1?0:d),t.$watch(function(){return t.fluidHeightStaticShown!==!1},function(t){i.changed(a,g,t?d:0)}),t.$on("$destroy",function(){i.changed(a,g,0)})}var n={restrict:"A",scope:{fluidHeightStatic:"=",fluidHeightStaticKey:"=",fluidHeightStaticHeight:"=?",fluidHeightStaticShown:"=?"},link:t};return n}angular.module("deopard.ngFluidHeight").directive("fluidHeightStatic",i),i.$inject=["FluidHeightManager"]}(),function(){function i(i){function t(i,t){d[i]=t}function n(i,t,n){angular.isUndefined(g[i])&&(g[i]={}),g[i][t]=n}function e(i){var t=0;return angular.forEach(g[i],function(i){t+=i}),angular.forEach(g.common,function(i){t+=i}),a[0].innerHeight-t}function u(i,t,n){g[i][t]=n,angular.isUndefined(d[i])||d[i].$emit("fluid-height-changed")}var a=angular.element(i),g={},d={};this.registerFluid=t,this.registerStatic=n,this.getFluidHeight=e,this.changed=u}angular.module("deopard.ngFluidHeight").service("FluidHeightManager",i),i.$inject=["$window"]}();